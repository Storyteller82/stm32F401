
HW2_401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ef8  08002ef8  00003ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f10  08002f10  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  08002f10  08002f10  00003f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f18  08002f18  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f18  08002f18  00003f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f1c  08002f1c  00003f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002f20  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000018  08002f38  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002f38  0000414c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bff  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b00  00000000  00000000  0000dc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0000f748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000775  00000000  00000000  000100f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001507d  00000000  00000000  0001086d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c295  00000000  00000000  000258ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000833df  00000000  00000000  00031b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c8  00000000  00000000  000b4fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000b776c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002ee0 	.word	0x08002ee0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08002ee0 	.word	0x08002ee0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:
						0b1111111,	//8
						0b1101111 	//9
					};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON1_Pin)
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80004d4:	d108      	bne.n	80004e8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		Counter++;
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <HAL_GPIO_EXTI_Callback+0x58>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	b21b      	sxth	r3, r3
 80004dc:	b29b      	uxth	r3, r3
 80004de:	3301      	adds	r3, #1
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	b21a      	sxth	r2, r3
 80004e4:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <HAL_GPIO_EXTI_Callback+0x58>)
 80004e6:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == BUTTON2_Pin)
 80004e8:	88fb      	ldrh	r3, [r7, #6]
 80004ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80004ee:	d108      	bne.n	8000502 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		Counter--;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <HAL_GPIO_EXTI_Callback+0x58>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	3b01      	subs	r3, #1
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	b21a      	sxth	r2, r3
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <HAL_GPIO_EXTI_Callback+0x58>)
 8000500:	801a      	strh	r2, [r3, #0]
	}

	if (GPIO_Pin == BUTTON3_Pin)
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000508:	d102      	bne.n	8000510 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		Flag_Go_Rx = 1;
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x5c>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
	}
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	20000034 	.word	0x20000034
 8000520:	2000003a 	.word	0x2000003a

08000524 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	//if(hspi == &hspi1)

		Counter = (int16_t) xRx;
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <HAL_SPI_RxCpltCallback+0x20>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	b21a      	sxth	r2, r3
 8000534:	4b04      	ldr	r3, [pc, #16]	@ (8000548 <HAL_SPI_RxCpltCallback+0x24>)
 8000536:	801a      	strh	r2, [r3, #0]

}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	20000140 	.word	0x20000140
 8000548:	20000034 	.word	0x20000034

0800054c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	//if(hspi == &hspi2)

		(int16_t) xTx++;
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <HAL_SPI_TxCpltCallback+0x24>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	3301      	adds	r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <HAL_SPI_TxCpltCallback+0x24>)
 8000560:	701a      	strb	r2, [r3, #0]

}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000000a 	.word	0x2000000a

08000574 <LED_OFF>:

void LED_OFF ()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 7; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	e00c      	b.n	800059a <LED_OFF+0x26>
	{
		HAL_GPIO_WritePin(GPIOA, (1 << i), GPIO_PIN_RESET);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2201      	movs	r2, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	b29b      	uxth	r3, r3
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <LED_OFF+0x5c>)
 8000590:	f000 ff66 	bl	8001460 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 7; i++)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	3301      	adds	r3, #1
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b06      	cmp	r3, #6
 800059e:	d9ef      	bls.n	8000580 <LED_OFF+0xc>
	}
	for (uint8_t i = 0; i < 3; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	71bb      	strb	r3, [r7, #6]
 80005a4:	e00c      	b.n	80005c0 <LED_OFF+0x4c>
	{
		HAL_GPIO_WritePin(GPIOB, (1 << i), GPIO_PIN_RESET);
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	2200      	movs	r2, #0
 80005b2:	4619      	mov	r1, r3
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <LED_OFF+0x60>)
 80005b6:	f000 ff53 	bl	8001460 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++)
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	3301      	adds	r3, #1
 80005be:	71bb      	strb	r3, [r7, #6]
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d9ef      	bls.n	80005a6 <LED_OFF+0x32>
	}
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40020400 	.word	0x40020400

080005d8 <LED_ON>:

void LED_ON (uint16_t Cifra, uint16_t Mesto)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	80fb      	strh	r3, [r7, #6]
 80005e4:	4613      	mov	r3, r2
 80005e6:	80bb      	strh	r3, [r7, #4]
	LED_OFF ();
 80005e8:	f7ff ffc4 	bl	8000574 <LED_OFF>

	GPIOA->ODR = Digit[Cifra];
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4a09      	ldr	r2, [pc, #36]	@ (8000614 <LED_ON+0x3c>)
 80005f0:	5cd2      	ldrb	r2, [r2, r3]
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <LED_ON+0x40>)
 80005f4:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(GPIOB, (1 << Mesto), GPIO_PIN_SET);
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	2201      	movs	r2, #1
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <LED_ON+0x44>)
 8000606:	f000 ff2b 	bl	8001460 <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	40020000 	.word	0x40020000
 800061c:	40020400 	.word	0x40020400

08000620 <Update_LED>:


void Update_LED ()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	if (Counter == 1000)
 8000624:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <Update_LED+0xe4>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b21b      	sxth	r3, r3
 800062a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800062e:	d103      	bne.n	8000638 <Update_LED+0x18>
	{
		Counter = 999;
 8000630:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <Update_LED+0xe4>)
 8000632:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000636:	801a      	strh	r2, [r3, #0]
	}

	if (Counter == -1)
 8000638:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <Update_LED+0xe4>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	b21b      	sxth	r3, r3
 800063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000642:	d102      	bne.n	800064a <Update_LED+0x2a>
	{
		Counter = 0;
 8000644:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <Update_LED+0xe4>)
 8000646:	2200      	movs	r2, #0
 8000648:	801a      	strh	r2, [r3, #0]
	}

	if (Mesto >= 3)
 800064a:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <Update_LED+0xe8>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d902      	bls.n	8000658 <Update_LED+0x38>
	{
	    Mesto = 0;
 8000652:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <Update_LED+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	801a      	strh	r2, [r3, #0]
	}

	switch (Mesto)
 8000658:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <Update_LED+0xe8>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d006      	beq.n	800066e <Update_LED+0x4e>
 8000660:	2b02      	cmp	r3, #2
 8000662:	dc3f      	bgt.n	80006e4 <Update_LED+0xc4>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d02f      	beq.n	80006c8 <Update_LED+0xa8>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d013      	beq.n	8000694 <Update_LED+0x74>
 800066c:	e03a      	b.n	80006e4 <Update_LED+0xc4>
	{
		case 2:
		Cifra = Counter % 10;
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <Update_LED+0xe4>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	b21a      	sxth	r2, r3
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <Update_LED+0xec>)
 8000676:	fb83 1302 	smull	r1, r3, r3, r2
 800067a:	1099      	asrs	r1, r3, #2
 800067c:	17d3      	asrs	r3, r2, #31
 800067e:	1ac9      	subs	r1, r1, r3
 8000680:	460b      	mov	r3, r1
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	440b      	add	r3, r1
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	b21b      	sxth	r3, r3
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <Update_LED+0xf0>)
 8000690:	801a      	strh	r2, [r3, #0]
		break;
 8000692:	e027      	b.n	80006e4 <Update_LED+0xc4>

		case 1:
		Cifra = (Counter / 10) % 10;
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <Update_LED+0xe4>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	b21b      	sxth	r3, r3
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <Update_LED+0xec>)
 800069c:	fb82 1203 	smull	r1, r2, r2, r3
 80006a0:	1092      	asrs	r2, r2, #2
 80006a2:	17db      	asrs	r3, r3, #31
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <Update_LED+0xec>)
 80006aa:	fb83 1302 	smull	r1, r3, r3, r2
 80006ae:	1099      	asrs	r1, r3, #2
 80006b0:	17d3      	asrs	r3, r2, #31
 80006b2:	1ac9      	subs	r1, r1, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <Update_LED+0xf0>)
 80006c4:	801a      	strh	r2, [r3, #0]
		break;
 80006c6:	e00d      	b.n	80006e4 <Update_LED+0xc4>

		case 0:
		Cifra = Counter / 100;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <Update_LED+0xe4>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	4a11      	ldr	r2, [pc, #68]	@ (8000714 <Update_LED+0xf4>)
 80006d0:	fb82 1203 	smull	r1, r2, r2, r3
 80006d4:	1152      	asrs	r2, r2, #5
 80006d6:	17db      	asrs	r3, r3, #31
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	b21b      	sxth	r3, r3
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <Update_LED+0xf0>)
 80006e0:	801a      	strh	r2, [r3, #0]
		break;
 80006e2:	bf00      	nop
	}

	  LED_ON (Cifra, Mesto);
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <Update_LED+0xf0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <Update_LED+0xe8>)
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff72 	bl	80005d8 <LED_ON>

	  Mesto++;
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <Update_LED+0xe8>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b02      	ldr	r3, [pc, #8]	@ (8000708 <Update_LED+0xe8>)
 80006fe:	801a      	strh	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000034 	.word	0x20000034
 8000708:	20000038 	.word	0x20000038
 800070c:	66666667 	.word	0x66666667
 8000710:	20000036 	.word	0x20000036
 8000714:	51eb851f 	.word	0x51eb851f

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fb76 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f836 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f936 	bl	8000994 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000728:	f000 f89e 	bl	8000868 <MX_I2C1_Init>
  MX_SPI1_Init();
 800072c:	f000 f8ca 	bl	80008c4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000730:	f000 f8fa 	bl	8000928 <MX_SPI2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t Timer = 0;

	  if ((HAL_GetTick() - Timer) > 1)
 8000734:	f000 fbd0 	bl	8000ed8 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <main+0x60>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	2b01      	cmp	r3, #1
 8000742:	d906      	bls.n	8000752 <main+0x3a>
	  {
		  Timer = HAL_GetTick();
 8000744:	f000 fbc8 	bl	8000ed8 <HAL_GetTick>
 8000748:	4603      	mov	r3, r0
 800074a:	4a0b      	ldr	r2, [pc, #44]	@ (8000778 <main+0x60>)
 800074c:	6013      	str	r3, [r2, #0]

		  Update_LED ();
 800074e:	f7ff ff67 	bl	8000620 <Update_LED>
	  }

	  if (Flag_Go_Rx == 1)
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <main+0x64>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b01      	cmp	r3, #1
 800075a:	d1eb      	bne.n	8000734 <main+0x1c>
	  {
		  Flag_Go_Rx = 0;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <main+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]

		  HAL_SPI_Receive_IT (& hspi1, & xRx, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	4906      	ldr	r1, [pc, #24]	@ (8000780 <main+0x68>)
 8000766:	4807      	ldr	r0, [pc, #28]	@ (8000784 <main+0x6c>)
 8000768:	f001 fda6 	bl	80022b8 <HAL_SPI_Receive_IT>

		  HAL_SPI_Transmit_IT (& hspi2, & xTx, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	4906      	ldr	r1, [pc, #24]	@ (8000788 <main+0x70>)
 8000770:	4806      	ldr	r0, [pc, #24]	@ (800078c <main+0x74>)
 8000772:	f001 fd1d 	bl	80021b0 <HAL_SPI_Transmit_IT>
  {
 8000776:	e7dd      	b.n	8000734 <main+0x1c>
 8000778:	20000144 	.word	0x20000144
 800077c:	2000003a 	.word	0x2000003a
 8000780:	20000140 	.word	0x20000140
 8000784:	20000090 	.word	0x20000090
 8000788:	2000000a 	.word	0x2000000a
 800078c:	200000e8 	.word	0x200000e8

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	@ 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	@ 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fb72 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <SystemClock_Config+0xd0>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	4a28      	ldr	r2, [pc, #160]	@ (8000860 <SystemClock_Config+0xd0>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c4:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <SystemClock_Config+0xd4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007dc:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <SystemClock_Config+0xd4>)
 80007de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <SystemClock_Config+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000808:	2354      	movs	r3, #84	@ 0x54
 800080a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f000 ff97 	bl	800174c <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000824:	f000 f93a 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2102      	movs	r1, #2
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f9f9 	bl	8001c3c <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000850:	f000 f924 	bl	8000a9c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000854:	f001 fad8 	bl	8001e08 <HAL_RCC_EnableCSS>
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	@ 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_I2C1_Init+0x50>)
 800086e:	4a13      	ldr	r2, [pc, #76]	@ (80008bc <MX_I2C1_Init+0x54>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_I2C1_Init+0x50>)
 8000874:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x58>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_I2C1_Init+0x50>)
 8000886:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800088a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_I2C1_Init+0x50>)
 80008a6:	f000 fe0d 	bl	80014c4 <HAL_I2C_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b0:	f000 f8f4 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000003c 	.word	0x2000003c
 80008bc:	40005400 	.word	0x40005400
 80008c0:	000186a0 	.word	0x000186a0

080008c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008ca:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <MX_SPI1_Init+0x60>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_SPI1_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_SPI1_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_SPI1_Init+0x5c>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_SPI1_Init+0x5c>)
 800090e:	f001 fbc6 	bl	800209e <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f8c0 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000090 	.word	0x20000090
 8000924:	40013000 	.word	0x40013000

08000928 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_SPI2_Init+0x64>)
 800092e:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <MX_SPI2_Init+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_SPI2_Init+0x64>)
 8000934:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_SPI2_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_SPI2_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_SPI2_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_SPI2_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_SPI2_Init+0x64>)
 8000954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000958:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_SPI2_Init+0x64>)
 800095c:	2230      	movs	r2, #48	@ 0x30
 800095e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <MX_SPI2_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_SPI2_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <MX_SPI2_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_SPI2_Init+0x64>)
 8000974:	220a      	movs	r2, #10
 8000976:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_SPI2_Init+0x64>)
 800097a:	f001 fb90 	bl	800209e <HAL_SPI_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000984:	f000 f88a 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000e8 	.word	0x200000e8
 8000990:	40003800 	.word	0x40003800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b38      	ldr	r3, [pc, #224]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a37      	ldr	r2, [pc, #220]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b35      	ldr	r3, [pc, #212]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a30      	ldr	r2, [pc, #192]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a29      	ldr	r2, [pc, #164]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin
 80009fe:	2200      	movs	r2, #0
 8000a00:	217f      	movs	r1, #127	@ 0x7f
 8000a02:	4824      	ldr	r0, [pc, #144]	@ (8000a94 <MX_GPIO_Init+0x100>)
 8000a04:	f000 fd2c 	bl	8001460 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_Pin|SEG2_Pin|SEG3_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2107      	movs	r1, #7
 8000a0c:	4822      	ldr	r0, [pc, #136]	@ (8000a98 <MX_GPIO_Init+0x104>)
 8000a0e:	f000 fd27 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8000a12:	237f      	movs	r3, #127	@ 0x7f
 8000a14:	60fb      	str	r3, [r7, #12]
                          |E_Pin|F_Pin|G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	481a      	ldr	r0, [pc, #104]	@ (8000a94 <MX_GPIO_Init+0x100>)
 8000a2a:	f000 fb95 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_Pin SEG2_Pin SEG3_Pin */
  GPIO_InitStruct.Pin = SEG1_Pin|SEG2_Pin|SEG3_Pin;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_GPIO_Init+0x104>)
 8000a46:	f000 fb87 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8000a4a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_GPIO_Init+0x104>)
 8000a62:	f000 fb79 	bl	8001158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2103      	movs	r1, #3
 8000a6a:	2017      	movs	r0, #23
 8000a6c:	f000 fb1b 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a70:	2017      	movs	r0, #23
 8000a72:	f000 fb34 	bl	80010de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2104      	movs	r1, #4
 8000a7a:	2028      	movs	r0, #40	@ 0x28
 8000a7c:	f000 fb13 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a80:	2028      	movs	r0, #40	@ 0x28
 8000a82:	f000 fb2c 	bl	80010de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <HAL_I2C_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12b      	bne.n	8000b72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b36:	23c0      	movs	r3, #192	@ 0xc0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b46:	2304      	movs	r3, #4
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <HAL_I2C_MspInit+0x8c>)
 8000b52:	f000 fb01 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	@ 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	@ 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a49      	ldr	r2, [pc, #292]	@ (8000ccc <HAL_SPI_MspInit+0x144>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d152      	bne.n	8000c50 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	4b48      	ldr	r3, [pc, #288]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a47      	ldr	r2, [pc, #284]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b45      	ldr	r3, [pc, #276]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a39      	ldr	r2, [pc, #228]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b37      	ldr	r3, [pc, #220]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bfe:	2380      	movs	r3, #128	@ 0x80
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	482e      	ldr	r0, [pc, #184]	@ (8000cd4 <HAL_SPI_MspInit+0x14c>)
 8000c1a:	f000 fa9d 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c1e:	2318      	movs	r3, #24
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4827      	ldr	r0, [pc, #156]	@ (8000cd8 <HAL_SPI_MspInit+0x150>)
 8000c3a:	f000 fa8d 	bl	8001158 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2103      	movs	r1, #3
 8000c42:	2023      	movs	r0, #35	@ 0x23
 8000c44:	f000 fa2f 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c48:	2023      	movs	r0, #35	@ 0x23
 8000c4a:	f000 fa48 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c4e:	e039      	b.n	8000cc4 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_SPI_MspInit+0x154>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d134      	bne.n	8000cc4 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_SPI_MspInit+0x148>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c92:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	480a      	ldr	r0, [pc, #40]	@ (8000cd8 <HAL_SPI_MspInit+0x150>)
 8000cb0:	f000 fa52 	bl	8001158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	2024      	movs	r0, #36	@ 0x24
 8000cba:	f000 f9f4 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000cbe:	2024      	movs	r0, #36	@ 0x24
 8000cc0:	f000 fa0d 	bl	80010de <HAL_NVIC_EnableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	@ 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40003800 	.word	0x40003800

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ce4:	f001 f9c0 	bl	8002068 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x8>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 f8b9 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8000d46:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d4a:	f000 fba3 	bl	8001494 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8000d4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d52:	f000 fb9f 	bl	8001494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <SPI1_IRQHandler+0x10>)
 8000d62:	f001 fbcf 	bl	8002504 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000090 	.word	0x20000090

08000d70 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <SPI2_IRQHandler+0x10>)
 8000d76:	f001 fbc5 	bl	8002504 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000e8 	.word	0x200000e8

08000d84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8000d88:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d8c:	f000 fb82 	bl	8001494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dbc:	f7ff ffea 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	@ (8000df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f002 f857 	bl	8002e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fc95 	bl	8000718 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000dfc:	08002f20 	.word	0x08002f20
  ldr r2, =_sbss
 8000e00:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e04:	2000014c 	.word	0x2000014c

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	@ (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f92b 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fe32 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f943 	bl	80010fa <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f90b 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	20000014 	.word	0x20000014
 8000eac:	20000010 	.word	0x20000010

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000014 	.word	0x20000014
 8000ed4:	20000148 	.word	0x20000148

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000148 	.word	0x20000148

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	@ (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	@ (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d004      	beq.n	8001130 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2280      	movs	r2, #128	@ 0x80
 800112a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e00c      	b.n	800114a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2205      	movs	r2, #5
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e159      	b.n	8001428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8148 	bne.w	8001422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a2 	beq.w	8001422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <HAL_GPIO_Init+0x2e8>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a56      	ldr	r2, [pc, #344]	@ (8001440 <HAL_GPIO_Init+0x2e8>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b54      	ldr	r3, [pc, #336]	@ (8001440 <HAL_GPIO_Init+0x2e8>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a52      	ldr	r2, [pc, #328]	@ (8001444 <HAL_GPIO_Init+0x2ec>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a49      	ldr	r2, [pc, #292]	@ (8001448 <HAL_GPIO_Init+0x2f0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_GPIO_Init+0x202>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a48      	ldr	r2, [pc, #288]	@ (800144c <HAL_GPIO_Init+0x2f4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0x1fe>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a47      	ldr	r2, [pc, #284]	@ (8001450 <HAL_GPIO_Init+0x2f8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00d      	beq.n	8001352 <HAL_GPIO_Init+0x1fa>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a46      	ldr	r2, [pc, #280]	@ (8001454 <HAL_GPIO_Init+0x2fc>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d007      	beq.n	800134e <HAL_GPIO_Init+0x1f6>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a45      	ldr	r2, [pc, #276]	@ (8001458 <HAL_GPIO_Init+0x300>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d101      	bne.n	800134a <HAL_GPIO_Init+0x1f2>
 8001346:	2304      	movs	r3, #4
 8001348:	e008      	b.n	800135c <HAL_GPIO_Init+0x204>
 800134a:	2307      	movs	r3, #7
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x204>
 800134e:	2303      	movs	r3, #3
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x204>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x204>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x204>
 800135a:	2300      	movs	r3, #0
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f002 0203 	and.w	r2, r2, #3
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136c:	4935      	ldr	r1, [pc, #212]	@ (8001444 <HAL_GPIO_Init+0x2ec>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b38      	ldr	r3, [pc, #224]	@ (800145c <HAL_GPIO_Init+0x304>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a2f      	ldr	r2, [pc, #188]	@ (800145c <HAL_GPIO_Init+0x304>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <HAL_GPIO_Init+0x304>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a24      	ldr	r2, [pc, #144]	@ (800145c <HAL_GPIO_Init+0x304>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ce:	4b23      	ldr	r3, [pc, #140]	@ (800145c <HAL_GPIO_Init+0x304>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f2:	4a1a      	ldr	r2, [pc, #104]	@ (800145c <HAL_GPIO_Init+0x304>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_GPIO_Init+0x304>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141c:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <HAL_GPIO_Init+0x304>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f67f aea2 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021000 	.word	0x40021000
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f806 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e12b      	b.n	800172e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fb04 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2224      	movs	r2, #36	@ 0x24
 80014f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001528:	f000 fd8a 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 800152c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a81      	ldr	r2, [pc, #516]	@ (8001738 <HAL_I2C_Init+0x274>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d807      	bhi.n	8001548 <HAL_I2C_Init+0x84>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a80      	ldr	r2, [pc, #512]	@ (800173c <HAL_I2C_Init+0x278>)
 800153c:	4293      	cmp	r3, r2
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	e006      	b.n	8001556 <HAL_I2C_Init+0x92>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4a7d      	ldr	r2, [pc, #500]	@ (8001740 <HAL_I2C_Init+0x27c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	bf94      	ite	ls
 8001550:	2301      	movls	r3, #1
 8001552:	2300      	movhi	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0e7      	b.n	800172e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4a78      	ldr	r2, [pc, #480]	@ (8001744 <HAL_I2C_Init+0x280>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0c9b      	lsrs	r3, r3, #18
 8001568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a6a      	ldr	r2, [pc, #424]	@ (8001738 <HAL_I2C_Init+0x274>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d802      	bhi.n	8001598 <HAL_I2C_Init+0xd4>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3301      	adds	r3, #1
 8001596:	e009      	b.n	80015ac <HAL_I2C_Init+0xe8>
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a69      	ldr	r2, [pc, #420]	@ (8001748 <HAL_I2C_Init+0x284>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	3301      	adds	r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	495c      	ldr	r1, [pc, #368]	@ (8001738 <HAL_I2C_Init+0x274>)
 80015c8:	428b      	cmp	r3, r1
 80015ca:	d819      	bhi.n	8001600 <HAL_I2C_Init+0x13c>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e59      	subs	r1, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015da:	1c59      	adds	r1, r3, #1
 80015dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015e0:	400b      	ands	r3, r1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <HAL_I2C_Init+0x138>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e59      	subs	r1, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f4:	3301      	adds	r3, #1
 80015f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fa:	e051      	b.n	80016a0 <HAL_I2C_Init+0x1dc>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e04f      	b.n	80016a0 <HAL_I2C_Init+0x1dc>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d111      	bne.n	800162c <HAL_I2C_Init+0x168>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1e58      	subs	r0, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	440b      	add	r3, r1
 8001616:	fbb0 f3f3 	udiv	r3, r0, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	e012      	b.n	8001652 <HAL_I2C_Init+0x18e>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1e58      	subs	r0, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	0099      	lsls	r1, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001642:	3301      	adds	r3, #1
 8001644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf0c      	ite	eq
 800164c:	2301      	moveq	r3, #1
 800164e:	2300      	movne	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Init+0x196>
 8001656:	2301      	movs	r3, #1
 8001658:	e022      	b.n	80016a0 <HAL_I2C_Init+0x1dc>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10e      	bne.n	8001680 <HAL_I2C_Init+0x1bc>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1e58      	subs	r0, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6859      	ldr	r1, [r3, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	440b      	add	r3, r1
 8001670:	fbb0 f3f3 	udiv	r3, r0, r3
 8001674:	3301      	adds	r3, #1
 8001676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800167e:	e00f      	b.n	80016a0 <HAL_I2C_Init+0x1dc>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e58      	subs	r0, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	0099      	lsls	r1, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	fbb0 f3f3 	udiv	r3, r0, r3
 8001696:	3301      	adds	r3, #1
 8001698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	6809      	ldr	r1, [r1, #0]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6911      	ldr	r1, [r2, #16]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68d2      	ldr	r2, [r2, #12]
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	000186a0 	.word	0x000186a0
 800173c:	001e847f 	.word	0x001e847f
 8001740:	003d08ff 	.word	0x003d08ff
 8001744:	431bde83 	.word	0x431bde83
 8001748:	10624dd3 	.word	0x10624dd3

0800174c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e267      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d075      	beq.n	8001856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800176a:	4b88      	ldr	r3, [pc, #544]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00c      	beq.n	8001790 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b85      	ldr	r3, [pc, #532]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800177e:	2b08      	cmp	r3, #8
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b82      	ldr	r3, [pc, #520]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800178e:	d10b      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	4b7e      	ldr	r3, [pc, #504]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_RCC_OscConfig+0x108>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d157      	bne.n	8001854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e242      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x74>
 80017b2:	4b76      	ldr	r3, [pc, #472]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b70      	ldr	r3, [pc, #448]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6f      	ldr	r2, [pc, #444]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6d      	ldr	r3, [pc, #436]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6c      	ldr	r2, [pc, #432]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017e4:	4b69      	ldr	r3, [pc, #420]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a68      	ldr	r2, [pc, #416]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b66      	ldr	r3, [pc, #408]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb68 	bl	8000ed8 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fb64 	bl	8000ed8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e207      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b5b      	ldr	r3, [pc, #364]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xc0>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb54 	bl	8000ed8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fb50 	bl	8000ed8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1f3      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b51      	ldr	r3, [pc, #324]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0xe8>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b44      	ldr	r3, [pc, #272]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b41      	ldr	r3, [pc, #260]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c7      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4937      	ldr	r1, [pc, #220]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_RCC_OscConfig+0x244>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fb09 	bl	8000ed8 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fb05 	bl	8000ed8 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a8      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4925      	ldr	r1, [pc, #148]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_RCC_OscConfig+0x244>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fae8 	bl	8000ed8 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fae4 	bl	8000ed8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e187      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d036      	beq.n	80019a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_RCC_OscConfig+0x248>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fac8 	bl	8000ed8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fac4 	bl	8000ed8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e167      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x200>
 800196a:	e01b      	b.n	80019a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCC_OscConfig+0x248>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff fab1 	bl	8000ed8 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e00e      	b.n	8001998 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff faad 	bl	8000ed8 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d907      	bls.n	8001998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e150      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	42470000 	.word	0x42470000
 8001994:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ea      	bne.n	800197a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8097 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b81      	ldr	r3, [pc, #516]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a7c      	ldr	r2, [pc, #496]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b77      	ldr	r3, [pc, #476]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a73      	ldr	r2, [pc, #460]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fa6d 	bl	8000ed8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7ff fa69 	bl	8000ed8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e10c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2ea>
 8001a28:	4b64      	ldr	r3, [pc, #400]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	4a63      	ldr	r2, [pc, #396]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x30c>
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	4a5e      	ldr	r2, [pc, #376]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a58:	4b58      	ldr	r3, [pc, #352]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a64:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a54      	ldr	r2, [pc, #336]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f023 0304 	bic.w	r3, r3, #4
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d015      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff fa2e 	bl	8000ed8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff fa2a 	bl	8000ed8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0cb      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	4b49      	ldr	r3, [pc, #292]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0ee      	beq.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fa18 	bl	8000ed8 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff fa14 	bl	8000ed8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0b5      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ee      	bne.n	8001aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	4a38      	ldr	r2, [pc, #224]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a1 	beq.w	8001c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aea:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d05c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d141      	bne.n	8001b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f9e8 	bl	8000ed8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f9e4 	bl	8000ed8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e087      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f9bd 	bl	8000ed8 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff f9b9 	bl	8000ed8 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e05c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x416>
 8001b80:	e054      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff f9a6 	bl	8000ed8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f9a2 	bl	8000ed8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e045      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e038      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d028      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d121      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0cc      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b68      	ldr	r3, [pc, #416]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d90c      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b65      	ldr	r3, [pc, #404]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a58      	ldr	r2, [pc, #352]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a52      	ldr	r2, [pc, #328]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d044      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e067      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4934      	ldr	r1, [pc, #208]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f8d4 	bl	8000ed8 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff f8d0 	bl	8000ed8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d20c      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f82d 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f834 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08002ef8 	.word	0x08002ef8
 8001e00:	2000000c 	.word	0x2000000c
 8001e04:	20000010 	.word	0x20000010

08001e08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <HAL_RCC_EnableCSS+0x14>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	4247004c 	.word	0x4247004c

08001e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e24:	b094      	sub	sp, #80	@ 0x50
 8001e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e38:	4b79      	ldr	r3, [pc, #484]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d00d      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x40>
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	f200 80e1 	bhi.w	800200c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x34>
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e52:	e0db      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b73      	ldr	r3, [pc, #460]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e58:	e0db      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5a:	4b72      	ldr	r3, [pc, #456]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e5e:	e0d8      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e60:	4b6f      	ldr	r3, [pc, #444]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d063      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e76:	4b6a      	ldr	r3, [pc, #424]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e92:	4622      	mov	r2, r4
 8001e94:	462b      	mov	r3, r5
 8001e96:	f04f 0000 	mov.w	r0, #0
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	0159      	lsls	r1, r3, #5
 8001ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea4:	0150      	lsls	r0, r2, #5
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4621      	mov	r1, r4
 8001eac:	1a51      	subs	r1, r2, r1
 8001eae:	6139      	str	r1, [r7, #16]
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ec4:	4659      	mov	r1, fp
 8001ec6:	018b      	lsls	r3, r1, #6
 8001ec8:	4651      	mov	r1, sl
 8001eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ece:	4651      	mov	r1, sl
 8001ed0:	018a      	lsls	r2, r1, #6
 8001ed2:	4651      	mov	r1, sl
 8001ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ed8:	4659      	mov	r1, fp
 8001eda:	eb63 0901 	sbc.w	r9, r3, r1
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	eb18 0303 	adds.w	r3, r8, r3
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	462b      	mov	r3, r5
 8001f00:	eb49 0303 	adc.w	r3, r9, r3
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f12:	4629      	mov	r1, r5
 8001f14:	028b      	lsls	r3, r1, #10
 8001f16:	4621      	mov	r1, r4
 8001f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	028a      	lsls	r2, r1, #10
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f26:	2200      	movs	r2, #0
 8001f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f30:	f7fe f950 	bl	80001d4 <__aeabi_uldivmod>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f3c:	e058      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	2200      	movs	r2, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	4611      	mov	r1, r2
 8001f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f58:	4642      	mov	r2, r8
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	f04f 0000 	mov.w	r0, #0
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	0159      	lsls	r1, r3, #5
 8001f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f6a:	0150      	lsls	r0, r2, #5
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4641      	mov	r1, r8
 8001f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f76:	4649      	mov	r1, r9
 8001f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f90:	ebb2 040a 	subs.w	r4, r2, sl
 8001f94:	eb63 050b 	sbc.w	r5, r3, fp
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	00eb      	lsls	r3, r5, #3
 8001fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fa6:	00e2      	lsls	r2, r4, #3
 8001fa8:	4614      	mov	r4, r2
 8001faa:	461d      	mov	r5, r3
 8001fac:	4643      	mov	r3, r8
 8001fae:	18e3      	adds	r3, r4, r3
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	eb45 0303 	adc.w	r3, r5, r3
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	028b      	lsls	r3, r1, #10
 8001fca:	4621      	mov	r1, r4
 8001fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	028a      	lsls	r2, r1, #10
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	61fa      	str	r2, [r7, #28]
 8001fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fe4:	f7fe f8f6 	bl	80001d4 <__aeabi_uldivmod>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4613      	mov	r3, r2
 8001fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800200a:	e002      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x204>)
 800200e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002014:	4618      	mov	r0, r3
 8002016:	3750      	adds	r7, #80	@ 0x50
 8002018:	46bd      	mov	sp, r7
 800201a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	00f42400 	.word	0x00f42400

08002028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <HAL_RCC_GetHCLKFreq+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c

08002040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002044:	f7ff fff0 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0a9b      	lsrs	r3, r3, #10
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4903      	ldr	r1, [pc, #12]	@ (8002064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	08002f08 	.word	0x08002f08

08002068 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_NMI_IRQHandler+0x20>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002074:	2b80      	cmp	r3, #128	@ 0x80
 8002076:	d104      	bne.n	8002082 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002078:	f000 f80a 	bl	8002090 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_RCC_NMI_IRQHandler+0x24>)
 800207e:	2280      	movs	r2, #128	@ 0x80
 8002080:	701a      	strb	r2, [r3, #0]
  }
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	4002380e 	.word	0x4002380e

08002090 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e07b      	b.n	80021a8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020c0:	d009      	beq.n	80020d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
 80020c8:	e005      	b.n	80020d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe fd49 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800210c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	ea42 0103 	orr.w	r1, r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	f003 0104 	and.w	r1, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	f003 0210 	and.w	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_SPI_Transmit_IT+0x1a>
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06a      	b.n	80022a4 <HAL_SPI_Transmit_IT+0xf4>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
 80021dc:	e062      	b.n	80022a4 <HAL_SPI_Transmit_IT+0xf4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_SPI_Transmit_IT+0x3c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e05b      	b.n	80022a4 <HAL_SPI_Transmit_IT+0xf4>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2203      	movs	r2, #3
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_SPI_Transmit_IT+0x8c>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <HAL_SPI_Transmit_IT+0x100>)
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44
 800223a:	e002      	b.n	8002242 <HAL_SPI_Transmit_IT+0x92>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a1d      	ldr	r2, [pc, #116]	@ (80022b4 <HAL_SPI_Transmit_IT+0x104>)
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800224a:	d10f      	bne.n	800226c <HAL_SPI_Transmit_IT+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800225a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800226a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002276:	2b40      	cmp	r3, #64	@ 0x40
 8002278:	d007      	beq.n	800228a <HAL_SPI_Transmit_IT+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80022a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	08002995 	.word	0x08002995
 80022b4:	0800294f 	.word	0x0800294f

080022b8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80022d2:	2302      	movs	r3, #2
 80022d4:	e07f      	b.n	80023d6 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d110      	bne.n	8002300 <HAL_SPI_Receive_IT+0x48>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022e6:	d10b      	bne.n	8002300 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2204      	movs	r2, #4
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f876 	bl	80023e8 <HAL_SPI_TransmitReceive_IT>
 80022fc:	4603      	mov	r3, r0
 80022fe:	e06a      	b.n	80023d6 <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_SPI_Receive_IT+0x54>
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e062      	b.n	80023d6 <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_SPI_Receive_IT+0x66>
 800231a:	2302      	movs	r3, #2
 800231c:	e05b      	b.n	80023d6 <HAL_SPI_Receive_IT+0x11e>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2204      	movs	r2, #4
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a1d      	ldr	r2, [pc, #116]	@ (80023e0 <HAL_SPI_Receive_IT+0x128>)
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40
 800236c:	e002      	b.n	8002374 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a1c      	ldr	r2, [pc, #112]	@ (80023e4 <HAL_SPI_Receive_IT+0x12c>)
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800237c:	d10f      	bne.n	800239e <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800238c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800239c:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b40      	cmp	r3, #64	@ 0x40
 80023aa:	d007      	beq.n	80023bc <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80023d2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	08002909 	.word	0x08002909
 80023e4:	080028bf 	.word	0x080028bf

080023e8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023fc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d00c      	beq.n	8002424 <HAL_SPI_TransmitReceive_IT+0x3c>
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002410:	d106      	bne.n	8002420 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_SPI_TransmitReceive_IT+0x38>
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d001      	beq.n	8002424 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	e061      	b.n	80024e8 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_SPI_TransmitReceive_IT+0x4e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_SPI_TransmitReceive_IT+0x4e>
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e056      	b.n	80024e8 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_SPI_TransmitReceive_IT+0x60>
 8002444:	2302      	movs	r3, #2
 8002446:	e04f      	b.n	80024e8 <HAL_SPI_TransmitReceive_IT+0x100>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b04      	cmp	r3, #4
 800245a:	d003      	beq.n	8002464 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2205      	movs	r2, #5
 8002460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	887a      	ldrh	r2, [r7, #2]
 8002486:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a16      	ldr	r2, [pc, #88]	@ (80024f4 <HAL_SPI_TransmitReceive_IT+0x10c>)
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a16      	ldr	r2, [pc, #88]	@ (80024f8 <HAL_SPI_TransmitReceive_IT+0x110>)
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80024a2:	e005      	b.n	80024b0 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a15      	ldr	r2, [pc, #84]	@ (80024fc <HAL_SPI_TransmitReceive_IT+0x114>)
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <HAL_SPI_TransmitReceive_IT+0x118>)
 80024ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ba:	2b40      	cmp	r3, #64	@ 0x40
 80024bc:	d007      	beq.n	80024ce <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80024e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	08002801 	.word	0x08002801
 80024f8:	08002861 	.word	0x08002861
 80024fc:	0800273d 	.word	0x0800273d
 8002500:	080027a1 	.word	0x080027a1

08002504 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10e      	bne.n	8002544 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
    return;
 8002542:	e0ce      	b.n	80026e2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_SPI_IRQHandler+0x5e>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
    return;
 8002560:	e0bf      	b.n	80026e2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <HAL_SPI_IRQHandler+0x7e>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80b0 	beq.w	80026e2 <HAL_SPI_IRQHandler+0x1de>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80aa 	beq.w	80026e2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d011      	beq.n	80025c8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	e00b      	b.n	80025e0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
        return;
 80025de:	e080      	b.n	80026e2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d014      	beq.n	8002614 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	f043 0208 	orr.w	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263c:	2b00      	cmp	r3, #0
 800263e:	d04f      	beq.n	80026e0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800264e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <HAL_SPI_IRQHandler+0x168>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d034      	beq.n	80026d6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0203 	bic.w	r2, r2, #3
 800267a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d011      	beq.n	80026a8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	4a17      	ldr	r2, [pc, #92]	@ (80026e8 <HAL_SPI_IRQHandler+0x1e4>)
 800268a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fd3e 	bl	8001112 <HAL_DMA_Abort_IT>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d016      	beq.n	80026de <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b4:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <HAL_SPI_IRQHandler+0x1e4>)
 80026b6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fd28 	bl	8001112 <HAL_DMA_Abort_IT>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80026d4:	e003      	b.n	80026de <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f812 	bl	8002700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80026dc:	e000      	b.n	80026e0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80026de:	bf00      	nop
    return;
 80026e0:	bf00      	nop
  }
}
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	08002715 	.word	0x08002715

080026ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff ffe6 	bl	8002700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f103 020c 	add.w	r2, r3, #12
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10f      	bne.n	8002798 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002786:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa62 	bl	8002c5c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	7812      	ldrb	r2, [r2, #0]
 80027b4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10f      	bne.n	80027f8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa32 	bl	8002c5c <SPI_CloseRxTx_ISR>
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	b292      	uxth	r2, r2
 8002814:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281a:	1c9a      	adds	r2, r3, #2
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10f      	bne.n	8002858 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002846:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fa02 	bl	8002c5c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f9d3 	bl	8002c5c <SPI_CloseRxTx_ISR>
    }
  }
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f103 020c 	add.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa22 	bl	8002d44 <SPI_CloseRx_ISR>
  }
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291a:	b292      	uxth	r2, r2
 800291c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	1c9a      	adds	r2, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f9ff 	bl	8002d44 <SPI_CloseRx_ISR>
  }
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa1c 	bl	8002dc4 <SPI_CloseTx_ISR>
  }
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9fa 	bl	8002dc4 <SPI_CloseTx_ISR>
  }
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029e8:	f7fe fa76 	bl	8000ed8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029f8:	f7fe fa6e 	bl	8000ed8 <HAL_GetTick>
 80029fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029fe:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	015b      	lsls	r3, r3, #5
 8002a04:	0d1b      	lsrs	r3, r3, #20
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a0e:	e054      	b.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d050      	beq.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a18:	f7fe fa5e 	bl	8000ed8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d902      	bls.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d13d      	bne.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a46:	d111      	bne.n	8002a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a50:	d004      	beq.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5a:	d107      	bne.n	8002a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a74:	d10f      	bne.n	8002a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e017      	b.n	8002ada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d19b      	bne.n	8002a10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002afc:	d111      	bne.n	8002b22 <SPI_EndRxTransaction+0x3a>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b06:	d004      	beq.n	8002b12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b10:	d107      	bne.n	8002b22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b2a:	d12a      	bne.n	8002b82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b34:	d012      	beq.n	8002b5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2180      	movs	r1, #128	@ 0x80
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff ff49 	bl	80029d8 <SPI_WaitFlagStateUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02d      	beq.n	8002ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e026      	b.n	8002baa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	2101      	movs	r1, #1
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff ff36 	bl	80029d8 <SPI_WaitFlagStateUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01a      	beq.n	8002ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e013      	b.n	8002baa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff ff23 	bl	80029d8 <SPI_WaitFlagStateUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e000      	b.n	8002baa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	2102      	movs	r1, #2
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff ff04 	bl	80029d8 <SPI_WaitFlagStateUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e032      	b.n	8002c4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <SPI_EndRxTxTransaction+0xa0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <SPI_EndRxTxTransaction+0xa4>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0d5b      	lsrs	r3, r3, #21
 8002bf2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c04:	d112      	bne.n	8002c2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fee1 	bl	80029d8 <SPI_WaitFlagStateUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d016      	beq.n	8002c4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e00f      	b.n	8002c4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c42:	2b80      	cmp	r3, #128	@ 0x80
 8002c44:	d0f2      	beq.n	8002c2c <SPI_EndRxTxTransaction+0x78>
 8002c46:	e000      	b.n	8002c4a <SPI_EndRxTxTransaction+0x96>
        break;
 8002c48:	bf00      	nop
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	2000000c 	.word	0x2000000c
 8002c58:	165e9f81 	.word	0x165e9f81

08002c5c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002c64:	4b35      	ldr	r3, [pc, #212]	@ (8002d3c <SPI_CloseRxTx_ISR+0xe0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a35      	ldr	r2, [pc, #212]	@ (8002d40 <SPI_CloseRxTx_ISR+0xe4>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a5b      	lsrs	r3, r3, #9
 8002c70:	2264      	movs	r2, #100	@ 0x64
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c78:	f7fe f92e 	bl	8000ed8 <HAL_GetTick>
 8002c7c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0220 	bic.w	r2, r2, #32
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ca0:	e009      	b.n	8002cb6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0eb      	beq.n	8002c8e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	2164      	movs	r1, #100	@ 0x64
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff7a 	bl	8002bb4 <SPI_EndRxTxTransaction>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d115      	bne.n	8002d24 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d107      	bne.n	8002d14 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fd fc09 	bl	8000524 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002d12:	e00e      	b.n	8002d32 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fce5 	bl	80026ec <HAL_SPI_TxRxCpltCallback>
}
 8002d22:	e006      	b.n	8002d32 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fce7 	bl	8002700 <HAL_SPI_ErrorCallback>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000000c 	.word	0x2000000c
 8002d40:	057619f1 	.word	0x057619f1

08002d44 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002d5c:	f7fe f8bc 	bl	8000ed8 <HAL_GetTick>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	2164      	movs	r1, #100	@ 0x64
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff febe 	bl	8002ae8 <SPI_EndRxTransaction>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fd fbb9 	bl	8000524 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002db2:	e002      	b.n	8002dba <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff fca3 	bl	8002700 <HAL_SPI_ErrorCallback>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e80 <SPI_CloseTx_ISR+0xbc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e84 <SPI_CloseTx_ISR+0xc0>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0a5b      	lsrs	r3, r3, #9
 8002dd8:	2264      	movs	r2, #100	@ 0x64
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de0:	f7fe f87a 	bl	8000ed8 <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002df8:	e009      	b.n	8002e0e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0eb      	beq.n	8002de6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	2164      	movs	r1, #100	@ 0x64
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fec6 	bl	8002bb4 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fc49 	bl	8002700 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002e6e:	e002      	b.n	8002e76 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fd fb6b 	bl	800054c <HAL_SPI_TxCpltCallback>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000000c 	.word	0x2000000c
 8002e84:	057619f1 	.word	0x057619f1

08002e88 <memset>:
 8002e88:	4402      	add	r2, r0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <__libc_init_array>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ed0 <__libc_init_array+0x38>)
 8002e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8002ed4 <__libc_init_array+0x3c>)
 8002e9e:	1b64      	subs	r4, r4, r5
 8002ea0:	10a4      	asrs	r4, r4, #2
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	42a6      	cmp	r6, r4
 8002ea6:	d109      	bne.n	8002ebc <__libc_init_array+0x24>
 8002ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed8 <__libc_init_array+0x40>)
 8002eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8002edc <__libc_init_array+0x44>)
 8002eac:	f000 f818 	bl	8002ee0 <_init>
 8002eb0:	1b64      	subs	r4, r4, r5
 8002eb2:	10a4      	asrs	r4, r4, #2
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	42a6      	cmp	r6, r4
 8002eb8:	d105      	bne.n	8002ec6 <__libc_init_array+0x2e>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec0:	4798      	blx	r3
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	e7ee      	b.n	8002ea4 <__libc_init_array+0xc>
 8002ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eca:	4798      	blx	r3
 8002ecc:	3601      	adds	r6, #1
 8002ece:	e7f2      	b.n	8002eb6 <__libc_init_array+0x1e>
 8002ed0:	08002f18 	.word	0x08002f18
 8002ed4:	08002f18 	.word	0x08002f18
 8002ed8:	08002f18 	.word	0x08002f18
 8002edc:	08002f1c 	.word	0x08002f1c

08002ee0 <_init>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr

08002eec <_fini>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	bf00      	nop
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr
